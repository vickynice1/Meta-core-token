name: Deploy Smart Contract to BSC Testnet

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      deploy_reason:
        description: 'Reason for deployment'
        required: false
        default: 'Manual deployment'
  
  # Scheduled deployment (every day at 12:00 UTC)
  schedule:
    - cron: '0 12 * * *'
  
  # Trigger on push to main branch
  push:
    branches: [ main ]
    paths: 
      - 'contracts/**'
      - 'scripts/**'

env:
  BSC_RPC_URL: 'https://data-seed-prebsc-1-s1.binance.org:8545/'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔍 Check Balance
      env:
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      run: |
        python -c "
        from web3 import Web3
        from eth_account import Account
        import os
        
        w3 = Web3(Web3.HTTPProvider('${{ env.BSC_RPC_URL }}'))
        account = Account.from_key(os.getenv('PRIVATE_KEY'))
        balance = w3.eth.get_balance(account.address)
        balance_bnb = w3.from_wei(balance, 'ether')
        
        print(f'Wallet: {account.address}')
        print(f'Balance: {balance_bnb} BNB')
        
        if balance == 0:
            print('⚠️ Warning: No BNB balance!')
            print('Get testnet BNB from: https://testnet.binance.org/faucet-smart')
        "
    
    - name: 🚀 Deploy Contract
      env:
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        BSC_RPC_URL: ${{ env.BSC_RPC_URL }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/deploy.py
      id: deploy
    
    - name: 📊 Upload Deployment Results
      uses: actions/upload-artifact@v4
      with:
        name: deployment-results-${{ github.run_number }}
        path: deployment_result.json
        retention-days: 30
        compression-level: 6
    
    - name: 💾 Save Contract Address to Environment
      if: success()
      run: |
        if [ -f deployment_result.json ]; then
          CONTRACT_ADDRESS=$(python -c "import json; data=json.load(open('deployment_result.json')); print(data['deployment_info']['contract_address'])")
          echo "CONTRACT_ADDRESS=$CONTRACT_ADDRESS" >> $GITHUB_ENV
          echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_ENV
        fi
    
    - name: 💬 Create Deployment Summary
      run: |
        echo "## 🎉 Contract Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f deployment_result.json ]; then
          CONTRACT_ADDRESS=$(python -c "import json; data=json.load(open('deployment_result.json')); print(data['deployment_info']['contract_address'])")
          TX_HASH=$(python -c "import json; data=json.load(open('deployment_result.json')); print(data['deployment_info']['transaction_hash'])")
          BLOCK_NUMBER=$(python -c "import json; data=json.load(open('deployment_result.json')); print(data['deployment_info']['block_number'])")
          GAS_USED=$(python -c "import json; data=json.load(open('deployment_result.json')); print(data['deployment_info']['gas_used'])")
          DEPLOYER=$(python -c "import json; data=json.load(open('deployment_result.json')); print(data['deployment_info']['deployer_address'])")
          
          echo "### 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Contract Address** | \`$CONTRACT_ADDRESS\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Transaction Hash** | \`$TX_HASH\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Block Number** | $BLOCK_NUMBER |" >> $GITHUB_STEP_SUMMARY
          echo "| **Gas Used** | $GAS_USED |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployer** | \`$DEPLOYER\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Network** | BSC Testnet |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment Time** | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View on BSCScan](https://testnet.bscscan.com/address/$CONTRACT_ADDRESS)" >> $GITHUB_STEP_SUMMARY
          echo "- [View Transaction](https://testnet.bscscan.com/tx/$TX_HASH)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add contract info
          echo "### 🪙 Token Details" >> $GITHUB_STEP_SUMMARY
          NAME=$(python -c "import json; data=json.load(open('deployment_result.json')); print(data['contract_info']['name'])")
          SYMBOL=$(python -c "import json; data=json.load(open('deployment_result.json')); print(data['contract_info']['symbol'])")
          DECIMALS=$(python -c "import json; data=json.load(open('deployment_result.json')); print(data['contract_info']['decimals'])")
          TOTAL_SUPPLY=$(python -c "import json; data=json.load(open('deployment_result.json')); print(int(data['contract_info']['totalSupply']) // (10**int(data['contract_info']['decimals'])))")
          
          echo "- **Name:** $NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Symbol:** $SYMBOL" >> $GITHUB_STEP_SUMMARY
          echo "- **Decimals:** $DECIMALS" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Supply:** $TOTAL_SUPPLY $SYMBOL" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Deployment failed - no result file found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 📝 Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('deployment_result.json')) {
            const data = JSON.parse(fs.readFileSync('deployment_result.json', 'utf8'));
            const comment = `## 🚀 Contract Deployed Successfully!
            
            ### 📋 Deployment Details
            - **Contract Address:** \`${data.deployment_info.contract_address}\`
            - **Transaction Hash:** \`${data.deployment_info.transaction_hash}\`
            - **Block Number:** ${data.deployment_info.block_number}
            - **Gas Used:** ${data.deployment_info.gas_used.toLocaleString()}
            - **Deployer:** \`${data.deployment_info.deployer_address}\`
            
            ### 🪙 Token Information
            - **Name:** ${data.contract_info.name}
            - **Symbol:** ${data.contract_info.symbol}
            - **Decimals:** ${data.contract_info.decimals}
            - **Total Supply:** ${(parseInt(data.contract_info.totalSupply) / Math.pow(10, data.contract_info.decimals)).toLocaleString()} ${data.contract_info.symbol}
            
            ### 🔗 Links
            - [View on BSCScan](${data.deployment_info.bscscan_url})
            - [View Transaction](https://testnet.bscscan.com/tx/${data.deployment_info.transaction_hash})
            
            ---
            *Deployed automatically via GitHub Actions* 🤖
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
    
    outputs:
      contract_address: ${{ env.CONTRACT_ADDRESS }}
      deployment_success: ${{ env.DEPLOYMENT_SUCCESS }}

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📧 Send Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Contract deployment completed successfully!"
        echo "Contract Address: ${{ needs.deploy.outputs.contract_address }}"
        echo "Check the Actions tab for detailed deployment information."
    
    - name: 🚨 Send Failure Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Contract deployment failed!"
        echo "Check the Actions logs for error details."
        echo "Common issues:"
        echo "- Insufficient BNB balance"
        echo "- Invalid private key"
        echo "- Network connectivity issues"
        echo "- Contract compilation errors"

  # Optional: Create a GitHub release with deployment info
  create_release:
    needs: deploy
    runs-on: ubuntu-latest
    if: needs.deploy.result == 'success' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 📥 Download Deployment Results
      uses: actions/download-artifact@v4
      with:
        name: deployment-results-${{ github.run_number }}
    
    - name: 🏷️ Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: deployment-${{ github.run_number }}
        release_name: Contract Deployment ${{ github.run_number }}
        body: |
          ## 🚀 Smart Contract Deployment
          
          **Contract Address:** `${{ needs.deploy.outputs.contract_address }}`
          **Network:** BSC Testnet
          **Deployment Time:** ${{ github.event.head_commit.timestamp }}
          
          ### 🔗 Links
          - [View on BSCScan](https://testnet.bscscan.com/address/${{ needs.deploy.outputs.contract_address }})
          
          ### 📁 Artifacts
          - Deployment details are attached as artifacts
        draft: false
        prerelease: false
